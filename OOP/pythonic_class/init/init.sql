__init__(),初始化,相当于java的构造器
参数传递的多样化->初始化的多样化

python语言的类的层次结构:万物基于object类,自定义类中可以提供比较操作的默认实现

1.1 object
每个类,定义的时候,默认继承object类.

1.2 基类中__init__()方法

1.4 init方法创建常量清单
    很多情况下,应用汇包括一个常量集合;静态常量也构成了策略(或者状态)的一部分
    python没有提供定义一个简单而直接的方式来创建不可变对象

1.5 通过工厂函数调用init
    python世界中,类不是必要的;很多时候,用函数就能解决的事情不需要用类来处理
    1.5.1 实现工厂有两种方式:
        1,函数,返回不同类的对象
        2,类,包含了创建对象的方法

    1.5.2 注意避免模糊的else语句:不应该把else的意图留给读者去判断;条件语句的意图应当是直接的
    1.5.3 使用映射(dict)来简化设计(数据结构的选择)
        https://blog.csdn.net/qq_33688922/article/details/91890142
        关于partial的用法的说明

    1.6 在每个子类中实现init方法

    1.7 简单的组合对象
        python中,类不是必须的.
        一个组合对象也可以称作容器.
        设计集合类,有3种方式:
            封装:基于现有集合类,定义一个新类,属于外观模式的一个使用场景
            扩展:对现有集合类进行扩展,通常使用定义子类的方式来实现
            创建:重新设计

    1.8 组合对象的复合
        通常考虑使用一个流畅接口来完成逐个将对象添加到集合的操作,例如使用 *kw 参数的形式

    1.9 不带init方法的无状态对象
        一个策略对象,以插件的形式,复合在主对象上,来完成一种算法或者逻辑.它或许依赖助对象中的数据,策略对象本身并不携带任何数据
        通常策略类会和享元设计模式一起用,在策略对象中避免内部存储

    1.10 其他的类的定义

    1.11 多策略的init方法
        对象的创建可能来自多个来源
        很多全局的设计模式使用了多种方式来创建对象,其中一个是多策略的初始化

        为了将多策略应用于初始化,通常需要被迫放弃显式命名的参数:灵活性get,参数名透明性下降,意图不够明显

        静态函数有时候比复杂的init函数好,如果我们有多种方式可以创建一个对象的时候

        更加明智的方式是同事使用位置变量和关键字变量,更加开放和明智

        为了不必要的私有和公有定义的顺序而浪费很多脑细胞是没必要的
